{"    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n": {"score": 62, "closest_solution": "    for n, pattern in enumerate(left):\n            if type(pattern) is Argument:\n                if pattern.value == self.name:\n                    return n, Command(self.name, True)\n                else:\n                    break\n        return None, "}, "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n": {"score": 55, "closest_solution": "   nextchar = s[end]\n        except IndexError:\n            nextchar = ''\n        end += 1\n\n        if nextchar == '}':\n            break\n        elif nextchar != ',':\n            raise ValueError(errmsg(\"Expecting , delimiter\", s, end - 1))\n\n        try:\n            nextchar = s[end]\n            if nextchar in _ws:\n                end += 1\n                nextchar = s[end]\n                if nextchar in _ws:\n      "}, "    return number % 1.0\n": {"score": 75, "closest_solution": "      Returns number of "}, "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n": {"score": 67, "closest_solution": "    if l_ == l:\n                break\n            l_ = l\n        if times >= 1:\n            return True, l, c\n        return False,"}, "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n": {"score": 51, "closest_solution": "\n        parent = self.parent()\n        return [self(x) for x in parent.dual_basis()]\n\n    def monomi"}, "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n": {"score": 57, "closest_solution": "s:\n      A new `dict` that has all the entries of the given dictionaries.\n    \"\"\"\n    result = {}\n    for d in dictionaries:\n        result.update(d)\n    result.update(kwargs)\n    return resul"}, "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n": {"score": 58, "closest_solution": "     else:\n                    vercmp = -1\n            elif self.minor > other.minor:\n                vercmp = 1\n            else:\n                vercmp = -1\n        elif self.major > other.major:\n            vercmp = 1\n        else:\n            vercmp = -1\n\n        return vercmp\n\n    def _compare_pre_release(self, other):\n        \"\""}, "    return [x for x in strings if substring in x]\n": {"score": 64, "closest_solution": "     return ((i, j) for j in range(cols) for i in "}, "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n": {"score": 57, "closest_solution": "         else match.value)\n            if not same_name:\n                match.value = increment\n                return True, left_, collect"}, "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n": {"score": 57, "closest_solution": "   args.append('-dc')\n\n        # Additional parameters\n        if bounding_box is not None:\n            if len(bounding_box) != 6:\n                raise ValueError('bounding_box must have 6 elements')\n            args.append('-bb')\n     "}, "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n": {"score": 0, "closest_solution": null}, "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n": {"score": 65, "closest_solution": "\":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def _latex_(self):\n        r\"\"\"\n"}, "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n": {"score": 61, "closest_solution": "    text = [self.encode(s) for s in text]\n            max_length = max([len(x) for x in text])\n            nb = len(text)\n            targets = torch.ones("}, "    while b:\n        a, b = b, a % b\n    return a\n": {"score": 70, "closest_solution": "           else:\n                    return False\n"}, "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n": {"score": 63, "closest_solution": "            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\nde"}, "    return ' '.join([str(x) for x in range(n + 1)])\n": {"score": 81, "closest_solution": "    return ', '.join([str(x) for x in self._frames])"}, "    return len(set(string.lower()))\n": {"score": 67, "closest_solution": "      return self._store[key.lower()"}, "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n": {"score": 0, "closest_solution": null}, "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n": {"score": 57, "closest_solution": "ing\n    objs = []\n    for i in range(n):\n        c_string = rleToString( <RLE*> &Rs._R[i] )\n        py_string = c_string\n        objs.append({\n            'size':"}, "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n": {"score": 56, "closest_solution": ": False,\n        'source_format': 'fixed',\n        'contract': True,\n        'standard': 77,\n        'name_mangling' : True,\n    }\n\n    _operators = {\n        'and': '.and.',\n        'or': '.or.',\n        'xor': '.neqv.',\n        'equivalent': '.eqv.',\n        'not': '.not. ',\n    }\n\n    _relationals = {\n "}, "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n": {"score": 57, "closest_solution": "n\n\n    start_time = time.time()\n\n    deferred = 0\n    sent = 0\n\n    try:\n        connection = None\n        for context in get_messages_for_sending():\n            with context as message:\n                if message is None:\n                    # We didn't acquire the lock\n                    continue\n                try:\n                    if connection is None:\n                        connection = get_connection(backend=mailer_email_backend)\n                    logging.info(\"sending message '{0}' to {1}\".format(\n                        message.subject,\n               "}, "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n": {"score": 0, "closest_solution": null}, "    return [x for x in values if isinstance(x, int)]\n": {"score": 62, "closest_solution": "        yield 'false'\n        elif isinstance(o, (int"}, "    return len(string)\n": {"score": 83, "closest_solution": "     return codestring\n"}, "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n": {"score": 77, "closest_solution": "    for i in xrange(world.numRobots()):\n        if ID==0:\n            return "}, "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n": {"score": 63, "closest_solution": "         if stack[-2:] == ['a', 'b']:\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(i)\n        return not stack\nSUM"}, "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n": {"score": 52, "closest_solution": "\n        # completion\n        completer = QtWidgets.QCompleter()\n        if not QT5 and completion != \"st"}, "    return string.swapcase()\n": {"score": 69, "closest_solution": "      return torrent.start()\n"}, "    return ''.join(strings)\n": {"score": 82, "closest_solution": "     return ''.join(chunks)\n"}, "    return [x for x in strings if x.startswith(prefix)]\n": {"score": 66, "closest_solution": "se:\n\t\t\tcfg = [x for x in sys.argv if x.startswith('-')]\n"}, "    return [e for e in l if e > 0]\n": {"score": 71, "closest_solution": "    return [clean(v) for v in val]\n"}, "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n": {"score": 67, "closest_solution": " True\n        \"\"\"\n        for c in self.list():\n            if not c.is_zero():\n                return False\n        return True\n"}, "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n": {"score": 53, "closest_solution": "er\", s, end))\n\n        end += 1\n\n        try:\n            if s[end] in _ws:\n                end += 1\n                if s[end] in _ws:\n                    end = _w(s, end + 1).end()\n        except IndexError:\n            pass\n\n        try:\n            value, end = scan_once(s, end)\n        except StopIteration:\n "}, "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n": {"score": 60, "closest_solution": "       print('\u767b\u5f55\u6210\u529f')\n        time.sleep(2)\n    return  al"}, "    return sorted(list(set(l)))\n": {"score": 72, "closest_solution": ")\n    return list(set(proxies))\n"}, "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n": {"score": 72, "closest_solution": "     pos -= 1\n                if pos == 0:\n                    return endpos\n "}, "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n": {"score": 59, "closest_solution": "      res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return parent(arg)\n\n    def precompose(self, morphism):\n        r\"\"\"\n        Return the der"}, "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n": {"score": 54, "closest_solution": "   list_ = []\n        path = self.decode(hash_)\n\n        for stat in self._get_scandir(path):\n            if self.mime_accepted(stat['mime']):\n                list_.append(stat['name'])\n\n        return lis"}, "    return encode_cyclic(encode_cyclic(s))\n": {"score": 60, "closest_solution": "        return encode_basestring_ascii(o)\n "}, "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n": {"score": 57, "closest_solution": "         # Merge by index key\n            for item in items:\n                itemFound = False\n                for i, result in enumerate(results):\n                    if result['file'] == item['file']:\n                        results[i] = item\n                        itemFound = True\n                        break\n\n                if not itemFound:\n                    re"}, "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n": {"score": 63, "closest_solution": "ld\n    for a in xrange(w.numIDs()):\n        for b in xrange(a):\n            c = sim.getContacts(a,b)\n            if len(c) > 0:\n                for ci in c:\n                    assert len(ci) == 7,\"Inter"}, "    return n**2\n": {"score": 81, "closest_solution": "    return name\n"}, "    return [(e + 1) for e in l]\n": {"score": 72, "closest_solution": "    return [c.tolist() for c in "}, "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n": {"score": 65, "closest_solution": "     for line in self:\n            lines.append(line)\n            n += len(line)\n            if n >= hint:\n                break\n        return li"}, "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n": {"score": 61, "closest_solution": "     return \"0\"\n        else:\n            return s\n\n    def list(self):\n        \"\"\"\n        Return"}, "    return a * h / 2.0\n": {"score": 78, "closest_solution": ":\n    return i * 2 + 2\n"}, "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n": {"score": 56, "closest_solution": "ks\n    \"\"\"\n    result = []\n    for el in x:\n        if hasattr(el, '__iter__') and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\ndef ba"}, "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n": {"score": 59, "closest_solution": "     n = self.readinto(b)\n        if n is None:\n            return None\n        del b[n:]\n        return bytes(b)\n\n    def readall(self):\n   "}, "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n": {"score": 66, "closest_solution": " \"\"\"\n        for c in self.list():\n            if not c.is_zero():\n                return False\n        return True\n\n  "}, "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n": {"score": 68, "closest_solution": "cRles)\n    objs = []\n    for i in range(n):\n        Rs = RLEs(1)\n        cnts "}, "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n": {"score": 0, "closest_solution": null}, "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n": {"score": 54, "closest_solution": "       return \", \".join(val)\n\n    def lower_items(self):\n        return ((lk, \", \".j"}, "    for e in l:\n        if e >= t:\n            return False\n    return True\n": {"score": 80, "closest_solution": "ch, rev)\n        if rc != 0:\n            return False\n        return True\n\n "}, "    return x + y\n": {"score": 94, "closest_solution": "    return x - y\n"}, "    return set(s0) == set(s1)\n": {"score": 70, "closest_solution": "      return self.list() == ot"}, "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n": {"score": 67, "closest_solution": "       elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def list(self):"}, "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n": {"score": 66, "closest_solution": " \" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def _late"}, "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n": {"score": 62, "closest_solution": "        scores.sort(key=lambda tup: tup[0], reverse=True)\n        return scores\n\n    def pru"}, "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n": {"score": 67, "closest_solution": "e')\n\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return list(result)\n\n\nd"}, "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n": {"score": 59, "closest_solution": ": x + y)\n\n\ndef check_heap(a, op):\n    n = len(a)\n\n    def check_heap_rec(i):\n        l, r = left(i), right(i)\n        if l < n:\n            if not op(a[i], a[l]):\n                return False\n            return check_heap_rec(l)\n        if r < n:\n            if not op(a[i], r[r]):\n                return False\n     "}, "    return sum(range(n + 1))\n": {"score": 69, "closest_solution": "       return '(huge(%s) + 1)"}, "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n": {"score": 66, "closest_solution": " \" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def _late"}, "    return [(i * x) for i, x in enumerate(xs)][1:]\n": {"score": 67, "closest_solution": "            for i, (e, c) in enumerate(expr.args):\n"}, "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n": {"score": 63, "closest_solution": " \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def list(self):\n        \"\"\"\n "}, "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n": {"score": 51, "closest_solution": "\n        tabwidth = 3\n        new_code = []\n        for i, line in enumerate(code):\n            if line == '' or line == '\\n':\n                new_c"}, "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n": {"score": 57, "closest_solution": "        if self.ensure_ascii:\n            return ''.join(chunks)\n        else:\n            return u''.join(chunks)\n\n    def it"}, "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n": {"score": 57, "closest_solution": " in types:\n            return [self]\n        return sum([child.flat(*types) for child in s"}, "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n": {"score": 63, "closest_solution": "e')\n\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return l"}, "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n": {"score": 0, "closest_solution": null}, "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n": {"score": 64, "closest_solution": "    arg = [ ]\n        for x in parent.dual_basis():\n            res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return par"}, "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n": {"score": 54, "closest_solution": "   excl = ['concurrent']\n        if do.step == 1:\n            excl.append('step')\n            step = ''\n        else:\n            step = ', {step}'\n\n        return (\n"}, "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n": {"score": 55, "closest_solution": "    arg = [ ]\n        for x in parent.dual_basis():\n            res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return parent(a"}, "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n": {"score": 67, "closest_solution": "\n                return False\n            return check_heap_rec(l)\n        if r < n:\n            if not op(a[i], r[r]):\n                return False\n            return che"}, "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n": {"score": 61, "closest_solution": "          res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return par"}, "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n": {"score": 63, "closest_solution": "     n = 0\n        lines = []\n        for line in self:\n            lines.append(line)\n            n += len(line)\n            if n >= hint:\n                break\n        return lines\n"}, "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n": {"score": 59, "closest_solution": "age\n\n    def feed(self, byte_str):\n        for prober in self.probers:\n            if not prober:\n                continue\n            if not prober.active:\n                continue\n            state = prober.feed(byte_str)\n            if not state:\n                continue\n            if state == ProbingState.FOUND_IT:\n                self._best_guess_prober = prober\n                return self.st"}, "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n": {"score": 59, "closest_solution": "y\n    if nextchar == ']':\n        return values, end + 1\n    _append = values.append\n    while True:\n        try:\n            value, "}, "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n": {"score": 55, "closest_solution": "       if group_id:\n            return int(group_id)\n        r"}, "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n": {"score": 56, "closest_solution": "    ignored_names = set()\n\n    os.makedirs(dst)\n    errors = []\n    for name in names:\n        if name in ignored_names:\n            continue\n        srcname = "}, "    return \"db\" + bin(decimal)[2:] + \"db\"\n": {"score": 60, "closest_solution": "      return \"center=\" + str(self.x) + \",\""}, "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n": {"score": 59, "closest_solution": "\n                return False\n            return check_heap_rec(l)\n        if r < n:\n            if not op(a[i], r[r]):\n                return False\n            return check_heap"}, "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n": {"score": 54, "closest_solution": "                'be True')\n        if dilated_carving:\n            args.append('-dc')\n\n        # Additional parameters\n        if bounding_box is not None:\n            if len(bounding_box) != 6:\n                raise ValueError('bounding_box must have 6 elements')\n            args.append('-bb')\n            args.extend(str(b) for b in bounding_box)\n        if remove_internal:\n            args.append('-ri')\n        if center:\n            args.append('-cb')\n        args.extend(('-rotx',) * rotate_x)\n        args.extend(('-rotz',) * rotate_z)\n        if wireframe:\n            args.append('-aw')\n        if fit:\n            args.append('-fit')\n        if block_id is not None:\n            args.extend(('-bi', block_id))\n        if use_material_block_id:\n            args.append('-mb')\n        if use_offscreen_pbuffer:\n            args.append('-pb')\n        if d"}, "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n": {"score": 65, "closest_solution": "      return True\n\n            if choice == 'n':\n                return False\n\n            if choice == '\\x03':\n                return False\n\n            pr"}, "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n": {"score": 64, "closest_solution": " x):\n    if x is self: return 1\n    return 1\n\n  def IsIn"}, "    return bin(sum(int(i) for i in str(N)))[2:]\n": {"score": 60, "closest_solution": "      return sum([_flatten(c) for c in contactOr"}, "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n": {"score": 63, "closest_solution": "  \"\"\"\n    return [items[i:i+size] for i in xrange(0, len(items), size)]\n\n"}, "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n": {"score": 57, "closest_solution": "__str__(self):\n    return ', '.join([str(x) for x in self._frames])\n\n\n"}, "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n": {"score": 0, "closest_solution": null}, "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n": {"score": 0, "closest_solution": null}, "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n": {"score": 58, "closest_solution": "          separator = _item_separator\n        first = True\n        for value in lst:\n            if first:\n                first = False\n            else:\n                buf = se"}, "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n": {"score": 59, "closest_solution": "    def move(self):\n        return self.pop(0) if len(self) else None\n\n"}, "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n": {"score": 0, "closest_solution": null}, "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n": {"score": 58, "closest_solution": "main.gen()\n        if isinstance(arg, list) and len(arg) == 1 and isinstance(arg[0], RingDerivation):\n            arg = arg[0]\n        if not arg:\n            pass\n        elif (isin"}, "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n": {"score": 0, "closest_solution": null}, "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n": {"score": 57, "closest_solution": "    n = len(a)\n\n    def check_heap_rec(i):\n        l, r = left(i), right(i)\n        if l < n:\n            if not op(a[i], a[l]):\n                return False\n            return check_heap_rec(l)\n        if r < n:\n            if not op(a[i], r[r]):\n                return False\n            return check_heap_rec(r)\n        return True\n\n   "}, "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n": {"score": 60, "closest_solution": " that \\r\\n are not split in two pieces\n\n                # In C we'd look for these in parallel of course.\n                nlpos = line.find(\"\\n\", start)\n                crpos = line.find(\"\\r\", start)\n                if crpos == -1:\n                    if nlpos == -1:\n                        # Nothing found\n                        start = len(line)\n                    else:\n                        # Found \\n\n                        endpos = nlpos + 1\n                        break\n                elif nlpos == -1:\n                    # Found lone \\r\n                    endpos = crpos + 1\n                    break\n                elif nlpos < crpos:\n                    # Found \\n\n             "}, "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n": {"score": 63, "closest_solution": "t64)\n\n    value = 1\n    for y in range(a_shape[0]):\n        for x in range(a_shape[1]):\n            if x == y:\n                a[y][x] = value\n                value += 1\n            else:\n                a[y][x] = 0\n\n    for y in range(b_shape[0])"}, "    return abs(a % 10) * abs(b % 10)\n": {"score": 62, "closest_solution": "\n    return 0 <= (hash(variable) % 10"}, "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n": {"score": 63, "closest_solution": "()\n        s = \"\"\n        for i in range(len(dual_basis)):\n            c = coeffs[i]\n            sc = str(c)\n     "}, "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n": {"score": 54, "closest_solution": "           key = _floatstr(key)\n            elif key is True:\n                key = 'true'\n            elif key is False:\n                key = 'false'\n            elif key is None:\n                key = 'null'\n            elif isinstance(key, (int, long)):\n                key = str(key)\n            elif _skipkeys:\n                continue\n            else:\n                raise TypeError(\"key \" + "}, "    return [n + 2*i for i in range(n)]\n": {"score": 72, "closest_solution": "    return ((i, j) for j in range(cols)"}, "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n": {"score": 60, "closest_solution": "\" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def list(self):\n        \"\"\"\n        Return the list of "}, "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n": {"score": 69, "closest_solution": "\" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n"}, "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n": {"score": 54, "closest_solution": "s.n\n    cdef bytes py_string\n    cdef char* c_string\n    objs = []\n    for i in range(n):\n        c_string = rleToString( <RLE*> &Rs._R[i] )\n     "}, "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n": {"score": 53, "closest_solution": "          res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return parent(arg)\n\n    def precompose(self, morphism):\n"}, "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n": {"score": 55, "closest_solution": "            nnks,\n                    stride=stride,\n                    padding=padding,\n                    dilation=dilation,\n                    bias=not bn_affine,\n                )\n                for _ in range(nb_layers_per_net)\n            ]\n            if bn or bn_affine:\n                for j in range(nb_layers_per_net):\n                    nets1[j] = nn.Sequential"}, "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n": {"score": 64, "closest_solution": "lue = 1\n    for y in range(a_shape[0]):\n        for x in range(a_shape[1]):\n            if x == y:\n                a[y][x] = value\n                value += 1\n            else:\n                a[y][x] = 0\n\n    for y in range(b_shape[0]):\n        for x in ra"}, "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n": {"score": 51, "closest_solution": " def _print_BooleanFalse(self, expr):\n        return '.false.'\n\n    def _pad_leading_columns(self, lines):\n        result = []\n        for line in lines:\n            if line.startswith('!'):\n                result.append(self._lead['comment'] + line[1:].lstrip())\n            else:\n                result.append(self._lead['code'] + line)\n        return result\n\n    def _wrap_f"}, "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n": {"score": 53, "closest_solution": "        for line in self:\n            lines.append(line)\n            n += len(line)\n            if n >= hint:\n                break\n        return lines\n\n    def writelines(self, lines):\n        self._checkClosed()\n        for line in line"}, "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n": {"score": 0, "closest_solution": null}, "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n": {"score": 66, "closest_solution": "ontNames()\n    found = 0\n    for f in fontList:\n        if found:\n            break\n        for i in availableFonts:\n            if not found:\n                if f == i:\n                    return f\n                   "}, "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n": {"score": 59, "closest_solution": "ing font for the Table of Contents.\"\"\"\n    availableFonts = scribus.getFontNames()\n    found = 0\n    for f in fontList:\n        if found:\n            break\n        for i in availableFonts:\n            if not found:\n                if f == i:\n                    return "}, "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n": {"score": 55, "closest_solution": "           ', '.join(repr(a) for a in self.children))\n\n    def flat(self, *types):\n"}, "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n": {"score": 52, "closest_solution": "  \"\"\"\n    result = []\n    for el in x:\n        if hasattr(el, '__iter__') and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\ndef"}, "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n": {"score": 55, "closest_solution": "            sum = 0\n                for k in range(matrix_size):\n                    x = ram_a.read(k)\n                    y = ram_b.read(k)\n                    sum += x * y\n                ram_c.write(j, sum)\n\n                b_addr += mat"}, "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n": {"score": 57, "closest_solution": "       return sum([_flatten(c) for c in contactOrHoldList],[])\n"}, "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n": {"score": 57, "closest_solution": "        return min(outcomes, key=lambda outcome: len(outcome[1]))\n  "}, "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n": {"score": 55, "closest_solution": "      \"\"\"\n        dual_basis = self.parent().dual_basis()\n        dict = { }\n        for i in range(len(dual_basis)):\n            c = self(dual_basis[i])\n            if c != 0:\n                dict[i] = c\n        return dict\n\n    def is_zero(self):\n        \"\"\"\n        Return ``True`"}, "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n": {"score": 51, "closest_solution": "     if isinstance(val, str):\n            if val.startswith(sg):\n                return val[len(sg) + 1 :]\n        if isinstance(val, dict):\n            return {k: clean(v) for k, v in val.items()}\n        if isinstance(val, list):\n            return [clean(v) for v in val]\n        return va"}, "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n": {"score": 62, "closest_solution": "     :type S: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in S:\n            if i == 'c':\n                if stack[-2:] == ['a', 'b']:\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(i)\n        return not stack\nSUM"}, "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n": {"score": 66, "closest_solution": "       elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n  "}, "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n": {"score": 56, "closest_solution": "    max_len = max(lens)\n    for i, l in enumerate(lens):\n        if l < "}, "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n": {"score": 61, "closest_solution": "   return sum([len(a) for a in self.attachments if len(a) > 0])\n"}, "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n": {"score": 59, "closest_solution": "     for i in S:\n            if i == 'c':\n                if stack[-2:] == ['a', 'b']:\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(i)\n        return not stack"}, "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n": {"score": 54, "closest_solution": "r == val - return child path\n        \"\"\"\n        try:\n            stat = self.stat(path)\n        except os.error:\n            return False\n\n        if (attr in stat and stat[attr] == val) or (not attr in stat and val == False):\n            return path\n\n        if stat['mime'] != 'directory':\n            return False\n\n        # check children\n        for p in self._get_cached_dir(path):\n            _p = self._closest_by_attr(p, attr, val)\n            if _p != False:\n                retur"}, "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n": {"score": 55, "closest_solution": "\n            n = -1\n        return self.reader.read(n)\n\n    def readinto(self, b):\n        return self.reader.readinto(b)\n\n    def write(self, b):\n        return self.writer.write(b)\n\n    def"}, "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n": {"score": 54, "closest_solution": "        if val.startswith(sg):\n                return val[len(sg) + 1 :]\n        if isinstance(val, dict):\n            return {k: clean(v) for k, v in val.items()}\n        if isinstance(val, list):\n            return [clean(v) for v in val]\n        return val\n\n    for a in (\n  "}, "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n": {"score": 56, "closest_solution": "defining_morphism()\n                morS = self._defining_morphism\n                try:\n                    # this test is not perfect\n                    for g in self._domain.gens():\n                        if morR(g) != morS(g):\n                            return False\n                    return True\n                except (AttributeError, NotImplementedError):\n                    pass\n        return supe"}, "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n": {"score": 0, "closest_solution": null}, "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n": {"score": 61, "closest_solution": "ine,\n                )\n                for _ in range(nb_layers_per_net)\n            ]\n            nets2 = [\n                nn.Conv2d(\n                    int(nnsize * c),\n                    int(nnsize * c),\n                    nnks,\n                    stride=stride,\n                    padding=padding,\n                    dilation=dilation,\n                    bias=not bn_affine,\n                )\n                for _ in range(nb_layers_per_net)\n            ]\n            if bn or bn_affine:\n                for j in range(nb_layers_per_net):\n                    nets1[j] = nn.Sequential(\n                        nets1[j],\n "}, "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n": {"score": 59, "closest_solution": "       if s[:3] == \" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def _latex_(self):\n        r\"\"\"\n        Return a La"}, "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n": {"score": 56, "closest_solution": "\n    availableFonts = scribus.getFontNames()\n    found = 0\n    for f in fontList:\n        if found:\n            break\n        for i in availableFonts:\n            if not found:\n                if f == i:\n                    return f\n                    fo"}, "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n": {"score": 53, "closest_solution": "()\n        task_ids = []\n        task_machines = []\n\n        if machine.lower() == \"all\":\n            for entry in db.list_machines():\n                task_machines.append(entry.label)\n        else:\n            task_machines.append(machine)\n\n        if \"sample\" in request.FILES:\n            for sample in request.FILES.getlist(\"sample\"):\n                if sample.size == 0:\n                    return render_to_response(\"error.html\",\n                                        "}, "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n": {"score": 62, "closest_solution": "def dict_merge(*dicts):\n    merged = {}\n    for d in dicts:\n        merged.update(d)\n    return merged\n\n"}, " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n": {"score": 0, "closest_solution": null}, "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n": {"score": 59, "closest_solution": "l, r = left(i), right(i)\n        if l < n:\n            if not op(a[i], a[l]):\n                return False\n"}, "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n": {"score": 0, "closest_solution": null}, "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n": {"score": 0, "closest_solution": null}, "    return n%2 == 0 and n >= 8\n": {"score": 65, "closest_solution": "    return self.block == 0\n    "}, "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n": {"score": 56, "closest_solution": ")\n                for i in range(1, number)]\n        bcoefs = make_bezier(number - 1)\n        points = []\n        for coefs in bcoefs:\n    "}, "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n": {"score": 59, "closest_solution": "]\n            if sc == \"1\":\n                s += \" + \" + ddx\n            elif sc == \"-1\":\n                s += \" - \" + ddx\n            elif c._is_atomic() and sc[0] != \"-\":\n                s += \" + %s*%s\" % (sc, ddx)\n            elif (-c)._is_atomic():\n                s += \" - %s*%s\" % (-c, ddx)\n            else:\n                s += \" + (%s)*%s\" % (sc, ddx)\n        if s[:3] == \" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0"}, "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n": {"score": 53, "closest_solution": "x)\n            else:\n                s += \" + \\\\left(%s\\\\right) %s\" % (sc, ddx)\n        if s[:3] == \" + \":\n            return s[3:]\n        elif s[:3] == \" - \":\n            return \"-\" + s[3:]\n        elif s == \"\":\n            return \"0\"\n        else:\n            return s\n\n    def list(self):\n        \"\"\"\n        Return the list of coefficient of this"}, "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n": {"score": 62, "closest_solution": "    line = line[pos:].lstrip()\n                    if line:\n                        hunk += trailing\n                    result.append(\"%s%s\" % (self._lead['cont'], hunk))\n            else:\n                result.append(line)\n        return result\n\n "}, "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n": {"score": 58, "closest_solution": "               for i, result in enumerate(results):\n                    if result['file'] == item['file']:\n                        results[i] = item\n                        itemFound = True\n                        break\n\n                if not itemFound:\n                    results.append(item)\n\n        retur"}, "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n": {"score": 53, "closest_solution": "(path == \"/\"):\n    #    path = \"index\"\n    session['path'] = path\n\ndef is_logged_in():\n    if 'logged_in' in session:\n        print('logged in')\n        return True\n    else:\n        return False"}, "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n": {"score": 56, "closest_solution": "    if n is None:\n            n = -1\n        if n < 0:\n            return self.readall()\n        b = bytearray(n.__index__())\n        n = self.readinto(b)\n        if n is None:\n            return None\n  "}, "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n": {"score": 54, "closest_solution": "ding\n                if (_encoding is not None\n                        and not (_encoding == 'utf-8')):\n                    o = o.decode(_encoding)\n            if self.ensure_ascii:\n                return encode_basestring_ascii(o)\n            else:\n                return encode_basestring(o)\n "}, "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n": {"score": 59, "closest_solution": " w = sim.world\n    for a in xrange(w.numIDs()):\n        for b in xrange(a):\n            c = sim.getContacts(a,b)\n            if len(c) > 0:\n                for ci in c:\n                    assert len(ci) == 7,\"Internal error in Simulation.getContacts()?\"\n "}, "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n": {"score": 0, "closest_solution": null}, "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n": {"score": 63, "closest_solution": "ct type')\n\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return list(result)\n\n"}, "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n": {"score": 67, "closest_solution": ":\n                    return None\n                if self.stream.sizeGe(size):\n                    return 0\n                break\n            size "}, "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n": {"score": 53, "closest_solution": "      return sum([len(a) for a in self.attachments if len(a) > 0])\n\n    def po"}, "    return [abs(x-y) for x,y in zip(game,guess)]\n": {"score": 69, "closest_solution": "   return [self(x) for x in parent.dual_basis()]\n"}, "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n": {"score": 0, "closest_solution": null}, "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n": {"score": 62, "closest_solution": "  n = len(a)\n\n    def check_heap_rec(i):\n        l, r = left(i), right(i)\n        if l < n:\n            if not op(a[i], a[l]):\n                return False\n            return check_h"}, "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n": {"score": 58, "closest_solution": "  self.n_count = 0\n        self.sum = 0\n\n    def val(self):\n        res = 0\n        if self.n_count != 0:\n            res = self.sum / float(self.n_count)\n        return res\n\ndef load_data(v,"}, "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n": {"score": 52, "closest_solution": "f \"conjunctions\":\n            self.predicate = [\n                [\n                    (\"int16\", \">\", 123),\n                    (\"int32\", \"<\", 321),\n                    (\"bool\", \"==\", True),\n                    (\"bool\", \"==\", True),\n                ]\n            ]\n        elif \"disjunctions\":\n            self.predicate = [\n                [(\"int16\", \">\", 123)],\n                [("}, "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n": {"score": 0, "closest_solution": null}, "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n": {"score": 60, "closest_solution": "     return min(outcomes, key=lambda outcome: len(outcome[1]))\n"}, "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n": {"score": 54, "closest_solution": "   for drawing in drawings:\n            image = drawing(image, text)\n            assert image\n        return image\n    return re"}, "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n": {"score": 50, "closest_solution": "e of dict type')\n\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return list(result)\n\n"}, "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n": {"score": 59, "closest_solution": "ted\")\n        if hint is None or hint <= 0:\n            return list(self)\n        n = 0\n        lines = []\n        for line in self:\n            lines.append(line)\n            n += len(line)\n            if n >= hint:\n                break\n        return lines\n\n    def w"}, "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n": {"score": 62, "closest_solution": "    import hashlib\n    search_hash = hashlib.sha1(name).hexdigest()\n    with shelf(\"com.thetvd"}, "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n": {"score": 51, "closest_solution": "     dx = dx / number\n        path = [(dx * i, random.randint(0, height))\n                for i in range(1, number)]\n    "}}
