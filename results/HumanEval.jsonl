{"score": 63, "solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "closest_solution": "   for i, channels_per_stage in enumerate(self.channels):\n            for j, out_channels in enumerate(channels_per_stage):\n                x = conv3x3_block(\n                    x=x,\n                    in_channels=in_channels,\n                    out"}
{"score": 0, "solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "closest_solution": null}
{"score": 79, "solution": "    return number % 1.0\n", "closest_solution": "    return 'number';\n   "}
{"score": 67, "solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "closest_solution": "    if l_ == l:\n                break\n            l_ = l\n        if times >= 1:\n            return True, l, c\n        return False,"}
{"score": 0, "solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "closest_solution": null}
{"score": 66, "solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "closest_solution": "        l = len(label)\n        if l > 63:\n            return None\n        results.append(common.chr(l))\n        results.append(label)\n    results.append(b'\\0')\n    return b''.join(results)\n\n\nd"}
{"score": 0, "solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "closest_solution": null}
{"score": 68, "solution": "    return [x for x in strings if substring in x]\n", "closest_solution": "     return [id for id in ids if self.ping(id)]\n\n "}
{"score": 0, "solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "closest_solution": null}
{"score": 62, "solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "closest_solution": "d_axes = []\n        for i, ax in enumerate(axes):\n            if ax is None:\n                ax = ibase.default_index(shape[i])\n            else:\n                ax = ensure_index(ax)\n            fixed_axes.append(ax)\n\n        return cre"}
{"score": 0, "solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "closest_solution": null}
{"score": 73, "solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "closest_solution": "    def choice(bool):\r\n        if bool:\r\n            return chr\r\n        else:\r\n            return \" \"\r\n    return \"\".join([choice(pos==idx) for idx in"}
{"score": 64, "solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "closest_solution": "ng):\n    if not string:\n        return \"\"\n    elif not isinstance(string, (unicode, str)):\n        return string\n    elif is_html(string):\n        return s"}
{"score": 72, "solution": "    while b:\n        a, b = b, a % b\n    return a\n", "closest_solution": "     if key == 0:\n                    return max\n "}
{"score": 78, "solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "closest_solution": "ect\n    result = []\n    for key in sorted(d.keys()):\n        result.append(d[key])\n    return result\n   "}
{"score": 81, "solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "closest_solution": "    return ', '.join([str(x) for x in self._frames])"}
{"score": 72, "solution": "    return len(set(string.lower()))\n", "closest_solution": "    return b64encode(string.encode()"}
{"score": 0, "solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "closest_solution": null}
{"score": 61, "solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "closest_solution": "    hamming_dist = 0\n\n    for i_char, _ in enumerate(str1):\n        if str1[i_char] != str2[i_char]:\n            hamming_dist += 1\n\n    return hamming_dist\n# -*- "}
{"score": 0, "solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "closest_solution": null}
{"score": 0, "solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "closest_solution": null}
{"score": 0, "solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "closest_solution": null}
{"score": 72, "solution": "    return [x for x in values if isinstance(x, int)]\n", "closest_solution": "     return [frames] if isinstance(frames, int) else "}
{"score": 87, "solution": "    return len(string)\n", "closest_solution": ":\n    return(len(string"}
{"score": 77, "solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "closest_solution": "    for i in xrange(world.numRobots()):\n        if ID==0:\n            return "}
{"score": 65, "solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "closest_solution": "um2):\n    result = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if a[i] < b[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n    result"}
{"score": 0, "solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "closest_solution": null}
{"score": 76, "solution": "    return string.swapcase()\n", "closest_solution": "    return string.encode(enc)"}
{"score": 86, "solution": "    return ''.join(strings)\n", "closest_solution": "    return ''.join(results)\n"}
{"score": 88, "solution": "    return [x for x in strings if x.startswith(prefix)]\n", "closest_solution": "    return set([x for x in keys if x.startswith(prefix)]"}
{"score": 74, "solution": "    return [e for e in l if e > 0]\n", "closest_solution": "     return [id for id in ids if se"}
{"score": 77, "solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "closest_solution": "):\n    if i == 0:\n        return 0\n    for j in xrange(1, 8):\n        if i < 1 << j * 8:\n            return j\n    return 8\n\n# exp"}
{"score": 0, "solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "closest_solution": null}
{"score": 65, "solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "closest_solution": "    l = list(l)  # noqa\n    if l:\n        return l[0]\n   "}
{"score": 81, "solution": "    return sorted(list(set(l)))\n", "closest_solution": "    return sorted(list(actions))"}
{"score": 73, "solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "closest_solution": "    srl = []\n        for id in ids:\n            try:\n                srl.exten"}
{"score": 61, "solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "closest_solution": "    fns = []\n                for i in range(x):\n                    fns.append(lambda i=i: i)\n                return fns\n            fns = make_fns(3)\n            for f in fns:\n                print(f())\n"}
{"score": 0, "solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "closest_solution": null}
{"score": 63, "solution": "    return encode_cyclic(encode_cyclic(s))\n", "closest_solution": "\n    return b64encode(string.encode()).deco"}
{"score": 0, "solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "closest_solution": null}
{"score": 67, "solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "closest_solution": "y=True):\n        list = []\n        for x in range(self.width):\n            for y in range(self.height):\n                if self[x][y] == key:\n                    list.append((x, y))\n        return list\n\n"}
{"score": 88, "solution": "    return n**2\n", "closest_solution": "    return 2**c\n"}
{"score": 78, "solution": "    return [(e + 1) for e in l]\n", "closest_solution": "     return [(d, d, d) for d in "}
{"score": 69, "solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "closest_solution": ")\n    for i, f in enumerate(clauses):\n        for s in selectables:\n            if f.is_derived_from(s):\n                return i, f\n    else:\n   "}
{"score": 63, "solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "closest_solution": " - 1\n    while length >= 0:\n        s1 = s1 + s[length]\n        length = length - 1\n    return s1\n"}
{"score": 78, "solution": "    return a * h / 2.0\n", "closest_solution": "\n    return i * 2 + 2\n\n"}
{"score": 0, "solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "closest_solution": null}
{"score": 65, "solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "closest_solution": " x in l if x is not None]\n    if len(l) == 1:\n        return l[0]\n    else:\n        return tuple(l)\n\ndef readmap(filename):\n\n    f = open(fil"}
{"score": 67, "solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "closest_solution": " for x in range(BOARDWIDTH):\n            if self.board[x][y] == BLANK:\n                return False\n        return True"}
{"score": 74, "solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "closest_solution": "    a = 0\n    for i in range(x):\n        x\n        a += i\n    return a\n\nprint "}
{"score": 0, "solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "closest_solution": null}
{"score": 0, "solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "closest_solution": null}
{"score": 80, "solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "closest_solution": "anch, rev)\n        if rc != 0:\n            return False\n        return True\n"}
{"score": 100, "solution": "    return x + y\n", "closest_solution": "    return x + y\n"}
{"score": 73, "solution": "    return set(s0) == set(s1)\n", "closest_solution": "    return str(self) == other\n"}
{"score": 80, "solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "closest_solution": "b(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return fib(n-1) + fib(n-2)\n\n# pas"}
{"score": 69, "solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "closest_solution": " = 0\n    for opt, void in optlist:\n        if opt == '-u':\n            optu = 1\n        elif opt == '-c':\n            optc = 1\n        elif opt == '-d':\n            optd = 1\n    if optu ="}
{"score": 66, "solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "closest_solution": "    print_point(p)\n    if point_in_circle(p, circle):\n        return True\n\n    return False\n"}
{"score": 67, "solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "closest_solution": "pe')\n\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return list(result)\n\n\n"}
{"score": 61, "solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "closest_solution": "    def __len__(self):\n                return 4\n            def __getitem__(self, key):\n                if key == 0:\n                    return max\n                elif key == 1:\n                    return tuple(range(1000000))\n                elif key in (2, 3):\n                    return {}\n                raise "}
{"score": 72, "solution": "    return sum(range(n + 1))\n", "closest_solution": "):\n    return sum(max(A[i + 1"}
{"score": 69, "solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "closest_solution": " = 0\n    for opt, void in optlist:\n        if opt == '-u':\n            optu = 1\n        elif opt == '-c':\n            optc = 1\n        elif opt == '-d':\n            optd = 1\n    if optu ="}
{"score": 71, "solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "closest_solution": "   results = []\n        for i, e in enumerate(ax):\n"}
{"score": 70, "solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "closest_solution": "\n    if length < 2:\n        return 0\n    if length == 2:\n        return 1\n    if length == 3:\n        return 2\n\n    # \u5c3d\u53ef\u80fd\u526a\u51fa3\n    timesOf3 = length // 3\n "}
{"score": 0, "solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "closest_solution": null}
{"score": 63, "solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "closest_solution": "\n    s2 = _quote_re2.sub( r\"\\\\\\1\", s )\n    if len( s1 ) <= len( s2 ):\n        return s1\n    else:\n        return s2\n\nif __name"}
{"score": 0, "solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "closest_solution": null}
{"score": 64, "solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "closest_solution": "\n    result = set([])\n\n    for _, v in res.items():\n        for value in v:\n            result.add(value)\n\n    return list("}
{"score": 0, "solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "closest_solution": null}
{"score": 64, "solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "closest_solution": "     arg = [ ]\n        for x in parent.dual_basis():\n            res = x\n            for _ in range(p):\n                res = self(res)\n            arg.append(res)\n        return pa"}
{"score": 0, "solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "closest_solution": null}
{"score": 0, "solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "closest_solution": null}
{"score": 73, "solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "closest_solution": "    if prev != 0:\n                return False\n            prev = cur\n        elif diff != 1:\n            return False\n        else:\n            prev = cur\n    return True"}
{"score": 71, "solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "closest_solution": "    profit = 0\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            profit += A[i] - A[i - 1]\n    return pro"}
{"score": 65, "solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "closest_solution": "            f = None\n    else:\n        f = None\n    try:\n        for tf in tests:\n            res = tf(h, f)\n            if res:\n                return res\n    finally:\n        if f: "}
{"score": 60, "solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "closest_solution": "ort(n[1:])\n        m = len(b)\n        for i in range(m):\n            if n[0] <= b[i]:\n                return b[:i]+[n[0]]+b[i:]\n        return b + [n[0]]\n\n    def insertion_sort(lst):\n        if len(lst) == 1:\n            return\n\n        for i in xrange(1, len(lst)):\n            temp = lst[i]\n            j = i - 1\n            while j >= 0 and temp < lst[j]:\n                lst[j + 1] = lst[j]\n     "}
{"score": 60, "solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "closest_solution": "    if i == 0:\n        return 0\n    for j in xrange(1, 8):\n        if i < 1 << j * 8:\n            return j\n    return 8\n\n# expects i "}
{"score": 0, "solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "closest_solution": null}
{"score": 66, "solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "closest_solution": "3', '4', '5', '6', '7', '8', '9', '+', '-', '.', 'e']\n        for i in range(len(alist)):\n            if alist[i] not in allowNum:\n                return False\n"}
{"score": 0, "solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "closest_solution": null}
{"score": 63, "solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "closest_solution": "\n    if len(values) < 1:\n        return False\n    if len(values) == 1:\n        if values[0] == 1:\n            return True\n        else:\n            return False\n\n    # values > 1"}
{"score": 0, "solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "closest_solution": null}
{"score": 71, "solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "closest_solution": "        else:\n            return False\n\n        for field in fields:\n            if field not in d:\n                return False\n\n        return True\n\n    d"}
{"score": 71, "solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "closest_solution": "if n == 1: return 1\n    else: return fib(n-1) + fib(n-2)"}
{"score": 65, "solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "closest_solution": "    return sum(chr_width(ord(c)) for c in string"}
{"score": 63, "solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "closest_solution": "\n    return [items[i:i+size] for i in xrange(0, len(items), size)]\n\ndef b"}
{"score": 63, "solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "closest_solution": "\"\"\n    hexn = ''.join([\"%02X\" % long(i) for i in ip.split('.')])\n    r"}
{"score": 0, "solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "closest_solution": null}
{"score": 0, "solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "closest_solution": null}
{"score": 65, "solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "closest_solution": "h_name_for_glib(name, joiner='-'):\n    res = ''\n    for c in name:\n        if c.isupper():\n            res += joiner + c.lower()\n        else:\n            res += c\n    return res\n"}
{"score": 0, "solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "closest_solution": null}
{"score": 61, "solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "closest_solution": "            per_sentence_tag_idxs = torch.split_with_sizes(tag_idxs, [len(sentence) + 2 for sentence in sentences])\n   "}
{"score": 0, "solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "closest_solution": null}
{"score": 0, "solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "closest_solution": null}
{"score": 0, "solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "closest_solution": null}
{"score": 61, "solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "closest_solution": "        # Nothing found\n                        start = len(line)\n                    else:\n                        # Found \\n\n                        endpos = nlpos + 1\n                        break\n                elif nlpos == -1:\n                    # Found lone \\r\n                    endpos = crpos + 1\n                    break\n                elif nlpos < crpos:\n                    # Found \\n\n                    endpos = nlpos + 1\n                    break\n                elif nlpos == crpos + 1:\n                    # Found \\r\\n\n                    endpos = crpos + 2\n                    break\n                else:\n                    # Found \\r\n                    endpos = crpos + 1\n "}
{"score": 66, "solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "closest_solution": "t = 0\n        for i in range(0, BOARDHEIGHT):\n            blank_row = True\n            for j in range(0, BOARDWIDTH):\n                if self.board[j][i] != '.':\n                    blank_row = False\n            if not blank_row:\n                s"}
{"score": 68, "solution": "    return abs(a % 10) * abs(b % 10)\n", "closest_solution": "     return abs(x1 - x2) * (y1 + y2) "}
{"score": 73, "solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "closest_solution": "t = 0\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            profit += A[i] - A[i - 1]\n    return"}
{"score": 0, "solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "closest_solution": null}
{"score": 79, "solution": "    return [n + 2*i for i in range(n)]\n", "closest_solution": "   return\n    \n    for i in range(n) :\n"}
{"score": 63, "solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "closest_solution": "    if not args:\n        args = ['-']\n    for filename in args:\n        if filename == '-':\n            readinput(sys.stdin)\n        else:\n            readinput(open(filename, 'r'))\n    #\n    warndups()\n    #\n    more = (optu + optc"}
{"score": 76, "solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "closest_solution": "\n    if length < 2:\n        return 0\n    if length == 2:\n        return 1\n    if length == 3:\n        return 2\n\n    # "}
{"score": 61, "solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "closest_solution": "        sum += i\n        return sum\n\n    def sumxx(self):\n        sum = 0\n        for i in self.x:\n            sum += i*i\n        return sum\n\n    "}
{"score": 0, "solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "closest_solution": null}
{"score": 0, "solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "closest_solution": null}
{"score": 67, "solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "closest_solution": "           for i in range(1, length):\n                tmp = lst[i]\n                for j in range(i-1, -1, -1):\n                    if lst[j] > tmp:\n                        lst[j+1] = lst[j]\n                    else:\n                        lst[j+1] = tmp\n"}
{"score": 0, "solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "closest_solution": null}
{"score": 0, "solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "closest_solution": null}
{"score": 0, "solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "closest_solution": null}
{"score": 67, "solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "closest_solution": "       odd = 0\n        pairs = []\n        for c in d:\n            if d[c]%2!=0:\n                oddchar = c\n                odd += 1\n            pairs += [c] * (d[c]/2)\n        if odd>1:\n            return []\n        c"}
{"score": 0, "solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "closest_solution": null}
{"score": 0, "solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "closest_solution": null}
{"score": 0, "solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "closest_solution": null}
{"score": 63, "solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "closest_solution": "    sum += i\n        return sum\n\n    def sumy(self):\n        sum = 0\n        for i in self.y:\n            sum += i\n        return sum\n\n    def sumxx(self):\n        sum = 0\n        for i in self.x:\n            sum += i*i\n        return sum\n\n"}
{"score": 0, "solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "closest_solution": null}
{"score": 63, "solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "closest_solution": "    for ws in sorted(word_stats.values(), key=lambda x: x.count, rev"}
{"score": 0, "solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "closest_solution": null}
{"score": 0, "solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "closest_solution": null}
{"score": 63, "solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "closest_solution": "\n    def isValid(self, S: str) -> bool:\n        s = list()\n        for i in S:\n            if i == 'c':\n                if len(s) >= 2 and s[-1] == 'b' and s[-2] == 'a':\n                    s.pop()\n                    s.pop()\n                else:\n                    return False\n            else:\n                s.append(i)\n        return len(s) == 0# \u5bfc\u5165"}
{"score": 70, "solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "closest_solution": "\n    if size == 0:\n        return 0\n    firstByte = reader.read(1)[0]\n    return f"}
{"score": 61, "solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "closest_solution": "    ind_l_test = [i for i,x in enumerate(test_T) if x == target]\n       "}
{"score": 61, "solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "closest_solution": "    return sum([len(a) for a in self.attachments if len(a) > 0])"}
{"score": 60, "solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "closest_solution": "rds)\n        if n > 1:\n            count = words[1]\n            if n > 2:\n                first = words[2]\n                if n > 3:\n                    last = words[3]\n                    if n > 4:\n                        name = words[4].lower()\n        return resp, int(count), "}
{"score": 0, "solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "closest_solution": null}
{"score": 0, "solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "closest_solution": null}
{"score": 0, "solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "closest_solution": null}
{"score": 0, "solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "closest_solution": null}
{"score": 0, "solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "closest_solution": null}
{"score": 62, "solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "closest_solution": "         vertices[iv].x = cx + cos(a1 + step * i) * w\n                vertices[iv].y = cy + sin(a1 + step * i) * w\n                vertices[iv].s0 = 1\n                vertices[iv].t0 = 1\n                if i == 0:\n                    indices[ii] = siv\n                    indices[ii + 1] = 0\n                    indices[ii + 2] = iv\n                else:\n                    indices[ii] = siv\n                    indices[ii + 1] = iv - 1\n                    indices[ii + 2] = iv\n                iv += 1\n                ii += 3\n            indices[ii] = siv\n            indices[ii + 1] = iv - 1\n            indices[ii + 2] = 3\n       "}
{"score": 0, "solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "closest_solution": null}
{"score": 0, "solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "closest_solution": null}
{"score": 0, "solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "closest_solution": null}
{"score": 66, "solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "closest_solution": "s import wrap \n\n@wrap\ndef add_list_elts(l):\n    su = 0\n    for li in l:\n        su += li\n    return su\n\n"}
{"score": 0, "solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "closest_solution": null}
{"score": 63, "solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "closest_solution": "    i = 1\n        while i < len(self.root):\n            if self.root[i-1] is self.root[i]:\n                "}
{"score": 0, "solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "closest_solution": null}
{"score": 0, "solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "closest_solution": null}
{"score": 71, "solution": "    return n%2 == 0 and n >= 8\n", "closest_solution": "      return x >= 0 and x < BOA"}
{"score": 62, "solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "closest_solution": "pairs(A):\n    profit = 0\n    for i in range(1, len(A)):\n        delta = A[i] - A[i - 1]\n        profit += max(delta, 0)\n    return profit\n#"}
{"score": 0, "solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "closest_solution": null}
{"score": 0, "solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "closest_solution": null}
{"score": 67, "solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "closest_solution": "   result = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if a[i] < b[j]:\n            result.append(num1[i])\n            i += 1\n        else:\n            result.append(num2[j])\n            j += 1\n    result += num1[i:]\n    resul"}
{"score": 61, "solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "closest_solution": "     i += 2\n                else:\n                    new_word.append(word[i])\n                    i += 1\n            new_word = tuple(new_word)\n            word = new_word\n            if len(word) == 1:\n                break\n            else:\n                pairs = get_pairs(word)\n        word = ' '.join(wo"}
{"score": 0, "solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "closest_solution": null}
{"score": 0, "solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "closest_solution": null}
{"score": 0, "solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "closest_solution": null}
{"score": 64, "solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "closest_solution": "= None :\n        assert len(headings) == d\n        \n    for i in range(n) :\n        for j in range(d) :\n            if type(t[j][i]) == type(1.0) :\n                s = \"%f\" % t[j][i]\n            else :\n                s = str(t[j][i])\n            if len(s)"}
{"score": 0, "solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "closest_solution": null}
{"score": 65, "solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "closest_solution": "       data_list = []\n        for item in chunk_list:\n            if len(item) > 1:\n                data_list.append(item)\n\n        while True"}
{"score": 72, "solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "closest_solution": "rror:\n        pass\n    for i in range(len(x)):\n        if x[i] is not y[i]:\n            y = tuple(y)\n            break\n    else:\n        y = x\n    "}
{"score": 0, "solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "closest_solution": null}
{"score": 69, "solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "closest_solution": "   return [self(x) for x in parent.dual_basis()]\n"}
{"score": 0, "solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "closest_solution": null}
{"score": 65, "solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "closest_solution": "\n        assert len(headings) == d\n        \n    for i in range(n) :\n        for j in range(d) :\n            if type(t[j][i]) == type(1.0) :\n                s = \"%f\" % t[j][i]\n       "}
{"score": 61, "solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "closest_solution": "\n    words = re.compile('[a-zA-Z0-9]+')\n    di = {}\n    for i in words.findall(data):\n        if i not in di:\n            di[i] = 1\n        else:\n            di[i] += 1\n    return di\n\nif __na"}
{"score": 0, "solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "closest_solution": null}
{"score": 0, "solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "closest_solution": null}
{"score": 63, "solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "closest_solution": "\n    return sorted(result, key=lambda result: result[\"project\"]"}
{"score": 0, "solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "closest_solution": null}
{"score": 0, "solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "closest_solution": null}
{"score": 62, "solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "closest_solution": "        s = \"\"\n        for i in xrange(0,bits):\n            if self.at(i):\n                s += \"1\"\n            else:\n                s += \"o\"\n            if not ((i+1) % 10):\n                s += '|%s|' % (i+1)\n        return s\n\n    def __repr__(self):\n        return s"}
{"score": 63, "solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "closest_solution": "   import md5 as hashlib\n#    extra = \"_\" + hashlib.md5(open(pyxfilename).read()).hexdigest()\n"}
{"score": 0, "solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "closest_solution": null}
